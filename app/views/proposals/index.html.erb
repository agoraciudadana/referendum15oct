<div id="insert_card_section">
    <div id="insert_card_section_wrapper">
        <h2>Insert your DNIe<br /> for voting</h2>
        <p>Loading, please wait...</p>
    </div>
    <div id="insert_dnie_icon">
        <%= image_tag("dni_icon_insertar.png", :alt => "Icon of a DNIe being introduced into the card reader") %>
    </div>
</div>

<div id="choose_section">
    <div id="instructions"><h2>Proposal 1 of <%= @proposals.length %></h2></div>
    <div id="proposals_items">
        <ul>
            <% @proposals.each_with_index do |proposal, index| %>
                <li id="proposal_<%= index + 1 %>" class="proposal_li_item">

                    <div id="proposals_title">
                        <h3><%= index + 1 %>. <%= proposal.name %></h3>
                    </div>
                    <div id="proposal_description">
                        <%= raw proposal.description %>
                    </div>
                    <div id="proposals_icon">
                        <%=image_tag("proposal_icon_#{index + 1}.png", :alt => "Propossal topic icon")%>
                    </div>

                    <div id="proposals_buttons">
                        <ul>
                                <li><%= link_to "Yes", "#", :class => "vote", :name => "proposal_#{index + 1}", :value => "0" %></li>
                                <li><%= link_to "No", "#", :class => "vote", :name => "proposal_#{index + 1}", :value => "1" %></li>
                                <li><%= link_to "Abstention", "#", :class => "vote", :name => "proposal_#{index + 1}", :value => "2" %></li>
                        </ul>
                    </div>

                    <br/>
                </li>
            <% end %>
        </ul>
    </div>
    <div id="confirmation">
        <ul>
            <% @proposals.each_with_index do |proposal, index| %>
            <li class="confirmation" id="confirmation_proposal_<%= index + 1 %>">
                <h3>
                <span class="number"><%= index + 1 %></span>
                <span class="title"><%= proposal.name %></span>
                <%= hidden_field_tag 'proposal_id', proposal.id, :class => "hidden_proposal_id" %>
                <%= hidden_field_tag 'proposal_vote', '-1', :class => "hidden_proposal_vote" %>
                <%= hidden_field_tag 'proposal_public_key', proposal.public_key, :class => "hidden_public_key" %>

                </h3>
                <span class="choice"></span>
                <span class="change"><%= link_to "<< change", "#", :class => "change_vote", :name => "#{index + 1}"  %></span>
            </li>
            <% end %>
        </ul>

        <div id="send_button">
        <%= link_to "Send vote", retrieve_dni_path %>
        </div>
    </div>

</div>


<script type="text/javascript" charset="utf-8">
  $(document).ready(function() {
    // Hide the items that are not shown by default. By default, only "insert_card_section"
    // is shown.
    $(".proposal_li_item").hide();
    $("#choose_section").hide();
    $("#confirmation").hide();
    $("#success_section").hide();
    $("#error_section").hide();
    $("#info_section").hide();
    $("#wait_section").hide();

    // Connect voting buttons to show next proposal screen
    <% @proposals.each_with_index do |proposal, i| %>
      $("#proposal_<%= i + 1 %> .vote").click(function () {
        $("#proposal_<%= i + 1 %>").fadeOut("fast", function() {
          if (<%= i + 1 %> != <%= @proposals.length %>) {
            $('#instructions h2').html("Proposal <%= i + 2 %> of <%= @proposals.length %>");
          }
          $("#proposal_<%= i + 2 %>").fadeIn("fast");
        });
      });
    <% end %>

    // Connect the buttons of the last proposal to show the confirmation screen
    $("#proposal_<%= @proposals.length  %> .vote").click(function () {
      $("#proposal_<%= @proposals.length  %>").fadeOut("fast", function() {
        $('#instructions h2').html("Confirmation");
        $("#proposals_items").hide();
        $("#confirmation").fadeIn("fast");
      });
    });

    // When the user clicks in a link to report a problem, let it send the
    // applet_log to the developers. At the moment, this just shows the applet_log
    // TODO
    $(".report_problem").click(function () {
        $("#applet_log").show();
    });

    // Connect the confirmation buttons to the proposals
    <% @proposals.each_with_index do |proposal, index| %>
        $("#confirmation_proposal_<%= index + 1 %> .change_vote").click(function () {
            $("#confirmation").fadeOut("fast", function() {
                // Show the correct proposal, hide all the others
                for (var i = 1; i < <%= @proposals.length %>; i++) {
                    if (i != <%= index + 1 %>) {
                        $("#proposal_" + i).hide();
                    }
                }
                $('#instructions h2').html("Proposal <%= index + 1 %> of <%= @proposals.length %>");

                // Make the shown proposal button go back to confirmation,
                $("#proposal_<%= index + 1 %> .vote").unbind("click").click(function () {

                    // updating confirmation data first
                    var proposal = $(this).attr("name");
                    var user_text = $(this).html();
                    var vote = $(this).val();
                    $("#confirmation_" + proposal + " .choice").html(user_text);
                    $("#confirmation_" + proposal + " .hidden_proposal_vote").val(vote);

                    $('#instructions h2').html("Confirmation");

                    // Show confirmation
                    $("#proposal_<%= index + 1 %>").fadeOut("fast", function() {
                        $("#proposals_items").hide();
                        $("#confirmation").fadeIn("fast");
                    });
                });
                $("#proposals_items").show();
                $("#proposal_" + <%= index + 1 %>).fadeIn("fast");
            });
        });
    <% end %>
  });

  // Connect the buttons of the proposals so that when clicking on them, the
  // confirmation screen is instantly updated
  <% @proposals.each_with_index do |proposal, i| %>
    $("#proposal_<%= i + 1 %> .vote").click(function () {
      var proposal = $(this).attr("name");
      var user_text = $(this).html();
      var vote = $(this).attr("value");
      $("#confirmation_" + proposal + " .hidden_proposal_vote").val(vote);
      $("#confirmation_" + proposal + " .choice").html(user_text);
    });
  <% end %>

    /**
     * Processes the vote when the user triggers the "Send Vote" button.
     */
    $(function() {
        $('#send_button a').click(function(e) {
            var applet = $('#java_applet').get(0);
            e.preventDefault();
            var ballotArray = [];
            $('#wait_section').fadeIn('fast');

            $('.confirmation').each(function(e) {
                var proposal = $(this).attr('id');
                var vote        = $("#" + proposal + " .hidden_proposal_vote").val();
                var proposal_id = $("#" + proposal + " .hidden_proposal_id").val();
                var public_key  = $("#" + proposal + " .hidden_public_key").val();
                ballotArray[ballotArray.length] = vote;
                ballotArray[ballotArray.length] = proposal_id;
                ballotArray[ballotArray.length] = public_key;
            });
            clearVotingData();
            applet.vote(ballotArray.join(','), location.protocol + "//" + document.domain + ":" + location.port);
            return false;
        });
    });

  /*
        The voting page works like a state machine. It has a default a state,
        and when it receives different events, it is processed in a different
        way depending on the current state. This processing can (but not always
        does) include an state change. A state always comes with a section of the
        voting page that will be shown.

        #### Sections:

        1. INSERT_CARD

        The default section. Lets the user know that he should proceed by
        inserting his electronic identity card.

        2. ERROR

        Shows some kind of error, with a title, description, some help content,
        and means to report the problem.

        3. CHOOSE

        The user is allowed to choose what to vote. This might include different
        screens (for example one screen per propossal, then another screen for
        review etc).

        4. WAIT

        The user must wait for a process to finish. This section has a title,
        and a description. For example, this is the section is shown when the
        user sends the vote and it's being processed.

        5. SUCCESS

        Shown when the user has finished successfully the voting process.

        6. INFO

        Shown when there is some kind of information that needs to be shown to
        the user.

        #### States:

        1. INIT

        The default state. It doesn't know anything about the configuration of
        the browser or the card reader or if the card is inserted. It shows the
        default section (INSERT_CARD).

        2. UNRECOVERABLE_ERROR

        Shows the ERROR section. It happens when for example when the events
        JAVA_DISABLED or NOT_USING_FIREFOX come in. There's nothing the user can
        do other than reloading the page when the error has been taken care of
        (by either enabling/installing java or changing to another browser in
        the example).

        3. INSERT_CARD

        Opendnie has been detected, Java version is Ok, user is using Firefox,
        Java applet was correctly loaded, the card or the card reader have not
        been detected yet. This shows the INSERT_CARD section.

        It gives access to some help explaining why the card/card reader might
        have not been detect and what to do in that case.

        4. INSERT_CARD_AGAIN

        Shows the ERROR section and explains to the user that there was a
        problem reading the card and that the easiest solution is usually to
        just unplug and replug the card.
        If the user was in CHOOSE state or in VOTING state, it explains to the
        user that his ballot have not been recorded yet.

        5. CHOOSE

        The card is ready to be used, and thus the user can choose his
        preferences for the propossals. After that, a confirmation screen is
        shown. Thus, shows the CHOOSE section.

        6. PROCESSING_VOTE

        Shown when the user needs to wait because his vote is being processed,
        for example when the user clicks "Vote". Shows the WAIT section.

        7. VOTING_CANCELLED

        Shows the INFO section. Informs to the user that the voting process was
        cancelled because he wanted (for example by not accepting to sign the
        vote).

        8. UNRECOVERABLE_CARD_VOTING_ERROR

        Shows the ERROR section. Happens when the user disconnects the card or
        the card reader.

        9. UNRECOVERABLE_VOTING_ERROR

        Shows the ERROR section. Happens if there was for example a timeout
        when sending the vote, or an error in the server side.

        10. SUCCESS

        Shows the INFO section. Happens when the vote was correctly casted. It
        allows the user to download the signed vote and the receipt of the vote.

        #### Events

        Error codes:

        * NOT_USING_FIREFOX
        * JAVA_DISABLED
        * JAVA_APPLET_CRASHED
        * UNKNOWN_ERROR
        * org.agora.VotingApplet$IncompatibleJavaVersion
        * java.security.ProviderException|Initialization failed
        * java.security.KeyStoreException
        * java.security.ProviderException|sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
        * java.lang.RuntimeException|Not a byte[]
        * org.agora.VotingApplet$PinCancelledByUser
        * org.agora.VotingApplet$BallotCastingError
        * org.agora.VotingApplet$SignatureCertificateNotFoundError
        * org.agora.VotingApplet$SignatureCertificateNotFoundError
        * org.agora.VotingApplet$CertificateWithoutPrivateKeyError
        * java.security.InvalidKeyException
        * org.agora.VotingApplet$InitTimeoutError
        * org.agora.VotingApplet$PinTimeoutError
        * org.agora.VotingApplet$UserInputTimeoutError
        * org.agora.VotingApplet$LoadCardDataTimeoutError
        * org.agora.VotingApplet$SignatureTimeoutError
        * org.agora.VotingApplet$SignatureTimeoutError
        * org.agora.VotingApplet$SendBallotsTimeoutError

        Info codes:

        * APPLET_LOAD
        * RELOADING_JAVA_APPLET
        * LOADING_JAVA_APPLET
        * DEBUG_INFO
        * INITIALIZED
        * CARD_INSIDE_READER
        * CARD_FOUND
        * INIT_DNI
        * FORGING_BALLOTS
        * SENDING_BALLOTS
        * VOTING
        * SUCCESS

        */

        var currentState = "INIT";
        var stateTransitions = [
            {
                'initial_states': ["INIT"],
                'events': ["NOT_USING_FIREFOX"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Unsupported web browser",
                        'description': "You are using a web Browser that is not supported. Unfortunately, currently only Mozilla Firefox is supported. If you have it installed already in your computer, try to load the web page on it, or install Firefox if you don't have it installed yet. Click <a href=\"http://wiki.agoraciudadana.org/index.php?title=Support/Web_Browsers#Not using Firefox\">here for instructions on how to install Mozilla Firefox</a>."
                    }
                }
            },
            {
                'initial_states': ["INIT"],
                'events': ["JAVA_DISABLED"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Java support is not active",
                        'description': "You don't have Java support enabled in your web browser but it's needed for Agora Ciudadana to work. Click <a href=\"http://wiki.agoraciudadana.org/index.php?title=Support/Java#Install_and_Configure_Java\">here for instructions on how to install and configure Java in your web browser</a>."
                    }
                }
            },
            {
                'initial_states': ["INIT"],
                'events': ["org.agora.VotingApplet$IncompatibleJavaVersion"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Incompatible Java version",
                        'description': "You have Java support enabled in your web browser but another version is needed for Agora Ciudadana to work. Click <a href=\"http://wiki.agoraciudadana.org/index.php?title=Support/Java#Install_and_Configure_Java\">here for instructions on how to install and configure Java in your web browser</a>."
                    }
                }
            },
            {
                'initial_states': ["INIT", "INSERT_CARD", "INSERT_CARD_AGAIN", "CHOOSE"],
                'events': ["JAVA_APPLET_CRASHED"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Java applet crashed",
                        'description': "The Java applet used in this page crashed (or you killed it) before you tried to send your vote. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to try again."
                    }
                }
            },
            {
                'initial_states': ["INIT", "INSERT_CARD", "INSERT_CARD_AGAIN", "CHOOSE"],
                'events': ["UNKNOWN_ERROR"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Unknown error",
                        'description': "An unknown error occurred before you tried to send your vote. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. Try to reload the web page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["INIT", "VOTING_CANCELLED",
                    "UNRECOVERABLE_VOTING_ERROR", "SUCCESS", "INSERT_CARD"],
                'events': ["java.security.ProviderException|Initialization failed"],
                'next_state': {
                    'state_id': "INSERT_CARD",
                    'section_id': "INSERT_CARD",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'card_reader_connected': false
                    }
                }
            },
            {
                'initial_states': ["INIT", "VOTING_CANCELLED",
                    "UNRECOVERABLE_VOTING_ERROR", "SUCCESS", "INSERT_CARD"],
                'events': ["java.security.KeyStoreException"],
                'next_state': {
                    'state_id': "INSERT_CARD",
                    'section_id': "INSERT_CARD",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'card_reader_connected': true
                    }
                }
            },
            {
                'initial_states': ["INIT", "INSERT_CARD", "CHOOSE",
                    "VOTING_CANCELLED", "SUCCESS", "INSERT_CARD_AGAIN"],
                'events': ["org.agora.VotingApplet$InitTimeoutError"],
                'next_state': {
                    'state_id': "INSERT_CARD_AGAIN",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error reading the card",
                        'description': "A problem ocurred while reading the card and that the easiest solution is usually to         just unplug and replug your DNIe into the card reader. If this doesn't work, try doing the same with the card reader, or restarting the web browser. If the problem persist, please <a href=\"#\" class= \"report_problem\">report it to us</a>."
                    }
                }
            },
            {
                'initial_states': ["INIT", "INSERT_CARD", "INSERT_CARD_AGAIN",
                    "UNRECOVERABLE_CARD_VOTING_ERROR"],
                'events': ["CARD_INSIDE_READER"],
                'next_state': {
                    'state_id': "CHOOSE",
                    'section_id': "CHOOSE",
                    'section_data': {
                    }
                }
            },
            {
                'initial_states': ["CHOOSE", "INSERT_CARD_AGAIN"],
                'events': ["java.security.ProviderException|Initialization failed"],
                'next_state': {
                    'state_id': "INSERT_CARD_AGAIN",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error reading the card",
                        'description': "You disconnected the card reader before sending your vote. Insert the card reader to start again the voting process."
                    }
                }
            },
            {
                'initial_states': ["CHOOSE", "INSERT_CARD_AGAIN"],
                'events': ["java.security.KeyStoreException"],
                'next_state': {
                    'state_id': "INSERT_CARD_AGAIN",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error reading the card",
                        'description': "You disconnected your DNIe from your card reader before sending your vote. Insert your DNIe into the card reader to start again the voting process."
                    }
                }
            },
            {
                'initial_states': ["CHOOSE"],
                'events': ["VOTING"],
                'next_state': {
                    'state_id': "PROCESSING_VOTE",
                    'section_id': "WAIT",
                    'section_data': {
                        'title': "Vote being processed",
                        'description': "Please wait..."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["JAVA_APPLET_CRASHED"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Java applet crashed",
                        'description': "The Java applet used in this page crashed (or you killed it) while trying to send your vote and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to try again."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["UNKNOWN_ERROR"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Unknown error",
                        'description': "An unknown error occurred while trying to send your vote and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>.  Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["java.security.ProviderException|Initialization failed"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_CARD_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Card removed",
                        'description': "The card reader was disconnected from the computer while trying to send your vote and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to reconnect your card reader with your DNIe inserted on it to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["java.security.KeyStoreException"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_CARD_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Card removed",
                        'description': "You DNIe was disconnected from the card reader while trying to send your vote and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to reinsert your DNIe in the card reader to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': [
                    "org.agora.VotingApplet$InitTimeoutError",
                    "java.lang.RuntimeException|Not a byte[]",
                    "java.security.InvalidKeyException"
                ],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error reading the card",
                        'description': "A problem ocurred while reading the card while trying to send your vote and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to extract and reinsert your DNIe in the card reader to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["java.security.ProviderException|sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR"],
                'next_state': {
                    'state_id': "VOTING_CANCELLED",
                    'section_id': "INFO",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Voting cancelled",
                        'description': "You cancelled the voting process by denying to sign the vote and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["org.agora.VotingApplet$PinCancelledByUser"],
                'next_state': {
                    'state_id': "VOTING_CANCELLED",
                    'section_id': "INFO",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Voting cancelled",
                        'description': "You cancelled the voting process by denying to enter your DNIe PIN and your vote was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["org.agora.VotingApplet$SendBallotsTimeoutError"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error when sending the ballot to the server",
                        'description': "A problem ocurred while sending your vote to the Ágora Ciudadana servers and it was <strong>NOT casted</strong> as a result. This could be triggered to a slow or bad Internet connection. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["org.agora.VotingApplet$PinTimeoutError"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error when processing the PIN",
                        'description': "A problem ocurred while processing the PIN of your DNIe cardand it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["org.agora.VotingApplet$BallotCastingError"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error when casting the ballot",
                        'description': "A problem ocurred while casting the ballots and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': [
                    "org.agora.VotingApplet$SignatureCertificateNotFoundError",
                    "org.agora.VotingApplet$CertificateWithoutPrivateKeyError",
                    "org.agora.VotingApplet$LoadCardDataTimeoutError",
                    "org.agora.VotingApplet$SignatureTimeoutError"
                ],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error when sending the ballot to the server",
                        'description': "A problem with your card or card reader ocurred while sending your vote to the Ágora Ciudadana servers and it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["org.agora.VotingApplet$UserInputTimeoutError"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_VOTING_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'trigger_applet_restart': true,
                        'title': "Error: user interaction timeout",
                        'description': "It took you too much to respond while sending your vote to the Ágora Ciudadana servers and for your own security, it was <strong>NOT casted</strong> as a result. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a> if you are sure it was not your fault. Try to extract and reinsert your DNIe in the card reader or reload the page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["INIT_DNI"],
                'next_state': {
                    'state_id': "PROCESSING_VOTE",
                    'section_id': "WAIT",
                    'section_data': {
                        'title': "Vote being processed",
                        'description': "Loading the DNIe certificate.."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["FORGING_BALLOTS"],
                'next_state': {
                    'state_id': "PROCESSING_VOTE",
                    'section_id': "WAIT",
                    'section_data': {
                        'title': "Vote being processed",
                        'description': "Creating and signing the ballots.."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["SENDING_BALLOTS"],
                'next_state': {
                    'state_id': "PROCESSING_VOTE",
                    'section_id': "WAIT",
                    'section_data': {
                        'title': "Vote being processed",
                        'description': "Sending the ballots to the server.."
                    }
                }
            },
            {
                'initial_states': ["PROCESSING_VOTE"],
                'events': ["SUCCESS"],
                'next_state': {
                    'state_id': "SUCCESS",
                    'section_id': "SUCCESS",
                    'section_data': {
                        'trigger_applet_restart': true,
                    }
                }
            },
            {
                'initial_states': ["VOTING_CANCELLED"],
                'events': ["JAVA_APPLET_CRASHED"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Java applet crashed",
                        'description': "The Java applet used in this page crashed (or you killed it) after you cancelled to send your vote. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to try again."
                    }
                }
            },
            {
                'initial_states': ["VOTING_CANCELLED"],
                'events': ["UNKNOWN_ERROR"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Unknown error",
                        'description': "An unknown error occurred after you cancelled to send your vote. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["UNRECOVERABLE_VOTING_ERROR"],
                'events': ["JAVA_APPLET_CRASHED"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Java applet crashed",
                        'description': "The Java applet used in this page crashed (or you killed it) after an unrecoverable voting error (so your vote was <strong>NOT casted</strong>). Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to try again."
                    }
                }
            },
            {
                'initial_states': ["VOTING_CANCELLED"],
                'events': ["UNKNOWN_ERROR"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Unknown error",
                        'description': "An unknown error occurred  after an unrecoverable voting error (so your vote was <strong>NOT casted</strong>). Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to restart the voting process."
                    }
                }
            },
            {
                'initial_states': ["SUCCESS"],
                'events': ["JAVA_APPLET_CRASHED"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Java applet crashed",
                        'description': "The Java applet used in this page crashed (or you killed it) after your vote correctly was casted, so don't worry, we <strong>DID cast successfully your vote</strong>. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to try again."
                    }
                }
            },
            {
                'initial_states': ["SUCCESS"],
                'events': ["UNKNOWN_ERROR"],
                'next_state': {
                    'state_id': "UNRECOVERABLE_ERROR",
                    'section_id': "ERROR",
                    'section_data': {
                        'title': "Unknown error",
                        'description': "An unknown error occurred after your vote correctly was casted, so don't worry, we <strong>DID cast successfully your vote</strong>. Please <a href=\"#\" class= \"report_problem\">report us the problem by clicking here</a>. You can reload the web page to vote again."
                    }
                }
            },
        ];

        var timeout;
        var lastStatus = "NONE";
        var restartApplet = false;
        var appletLoadedOnce = false;
        var appletCode = '<applet id="java_applet" code="org.agora.VotingApplet.class" archive="lib/apache-commons-codec-1.4.jar, lib/bcprov-1.45.jar, lib/verificatum.jar, lib/agora-applet.jar" width="0" height="0"></applet>';


        // This are some checks that are done at startup
        if (!(/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent))) {
            pushErrorEvent("NOT_USING_FIREFOX", "ERROR", "Unfortunately, only Mozilla Firefox is currently supported");
        } else if (!navigator.javaEnabled()) {
            pushErrorEvent("JAVA_DISABLED", "ERROR", "");
        } else {
            timeout = setTimeout("checkStatus()", 1000);
        }

        function checkStatus() {
            // If applet is not loaded
            try {
                var applet = $('#java_applet').get(0);
                applet.getAppletInfo();
                if (!appletLoadedOnce) {
                    appletLoadedOnce = true;
                    pushUpdateEvent("APPLET_LOAD", "first time applet is loaded", "version info = " + applet.getAppletInfo());
                }
            } catch (error) {
                // It might be still loading
                if (restartApplet) {
                    pushUpdateEvent("RELOADING_JAVA_APPLET", "please wait...", "");
                    $('#java_applet_wrapper').html(appletCode);
                    restartApplet = false;
                    appletLoadedOnce = false;
                } else {
                    if (!appletLoadedOnce) {
                        pushUpdateEvent("LOADING_JAVA_APPLET", "please wait...", "");
                    } else {
                        // Applet crashed/closed!
                        pushErrorEvent("JAVA_APPLET_CRASHED", "ERROR", "");
                    }
                }
            }
            // Set the timeout again
            timeout = setTimeout("checkStatus()", 2000);
        }

        String.prototype.startsWith = function(str) {
            return this.match("^" + str) == str;
        }

        function triggerAppletRestart() {
            restartApplet = true;
            var applet = $('#java_applet').get(0);
            applet.terminateApplet();
            $('#java_applet_wrapper').html("empty");
        }


        function clearVotingData() {
            $('.confirmation').each(function(e) {
                // Clear the voting data
                var proposal = $(this).attr('id');
                $("#confirmation_" + proposal + " .choice").html();
                $("#confirmation_" + proposal + " .hidden_proposal_vote").val('');
            });
        }

        function async_exception(className, description) {

            if (className == "java.security.ProviderException"
                && description == "Initialization failed") {
                pushErrorEvent(className + "|" + description, "", "NO CARD READER");

            } else if (className == "java.security.ProviderException" &&
                description == "sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR") {
                pushErrorEvent(className + "|" + description, "", "USER DID NOT WANT TO SIGN");


            } else if (className == "java.lang.RuntimeException" &&
                description == "Not a byte[]") {
                pushErrorEvent(className + "|" + description, "", "USER PROBABLY UNPLUG DNIE");

            } else {
                pushErrorEvent(className, description, "");
            }
        }

        /**
         * Callback function called by the applet to send updates.
         * @note to send errors, the applet calls to @ref async_exception
         */
        function async_update(code, description) {
            pushUpdateEvent(code, description, '');
        }

        function pushErrorEvent(code, message, customMessage) {
            pushEvent(code, message, customMessage, true);
        }

        function pushUpdateEvent(code, message, customMessage) {
            pushEvent(code, message, customMessage, false);
        }

        /**
         * @short Push a new event onto the state machine.
         *
         * The event is processed, a state transition might be triggered and
         * the event is also logged.
         */
        function pushEvent(code, message, customMessage, isError) {

            // deal with state transitions
            var transitionFound = false;
            var finalTransition = null;
            for(var i in stateTransitions) {
                var transition = stateTransitions[i];

                for (var j in transition['initial_states']) {
                    if (transition['initial_states'][j] != currentState) {
                        continue;
                    }
                    var eventsContainsUnknownError = false;
                    for (var k in transition['events']) {
                        var event = transition['events'][k];
                        if (event == code) {
                            finalTransition = transition;
                            transitionFound = true;
                            break;
                        } else if (event == "UNKNOWN_ERROR") {
                            eventsContainsUnknownError = true;
                        }
                    }

                    if (transitionFound) {
                        break;
                    } else if (isError && eventsContainsUnknownError) {
                        finalTransition = transition;
                    }
                }

                if (transitionFound) {
                    break;
                }
            }

            var html = '';
            // Apply transition
            if (transitionFound || isError) {
                var oldState = currentState;
                currentState = finalTransition['next_state']['state_id'];
                html += getCurrentTimeString() + " | <strong>transition</strong> from state "
                    + oldState + " to " + currentState + " and section "
                    + finalTransition['next_state']['section_id'] + " because of event " + code +"<br/>";

                if (finalTransition.next_state.section_data.trigger_applet_restart == true) {
                    html += "<strong>restarts applet</strong><br/>";
                }

                // Update the section data
                if (finalTransition.next_state.section_id == "INSERT_CARD") {
                    clearVotingData();
                    if (finalTransition.next_state.section_data.card_reader_connected) {
                        $('#insert_card_section p').html("Card reader connected, insert your DNIe");
                    } else {
                        $('#insert_card_section p').html("DNIe card reader not connected");
                    }
                } else if (finalTransition.next_state.section_id == "ERROR") {
                    clearVotingData();
                    $('#error_section h2').html(finalTransition.next_state.section_data.title);
                    $('#error_section p').html(finalTransition.next_state.section_data.description);
                } else if (finalTransition.next_state.section_id == "WAIT") {
                    $('#wait_section div').html(
                        finalTransition.next_state.section_data.title + "<br/><small>"
                        + finalTransition.next_state.section_data.description + "</small>"
                    );
                } else if (finalTransition.next_state.section_id == "INFO") {
                    $('#info_section h2').html(finalTransition.next_state.section_data.title);
                    $('#info_section p').html(finalTransition.next_state.section_data.description);
                } else if (finalTransition.next_state.section_id == "CHOOSE") {
                    clearVotingData();
                
                    // Show the first proposal only
                    $(".proposal_li_item").hide();
                    $("#proposal_1").show();
                    $("#proposals_items").show();
                    $("#confirmation").hide();
                }

                // Show the appropiate section
                var sections = ["INSERT_CARD", "ERROR", "WAIT", "CHOOSE", "SUCCESS", "INFO"];

                for (var i in sections) {
                    var section = sections[i];
                    if (section == finalTransition.next_state.section_id) {
                        $("#" + section.toLowerCase() + "_section").fadeIn("fast");
                    } else {
                        $("#" + section.toLowerCase() + "_section").hide();
                    }
                }
            }

            lastStatusCode = code;
            html += getCurrentTimeString() + " | " + code + ": " + message + "; "  + customMessage;
            $('#applet_info').html(html);
            $('#applet_log').html($('#applet_log').html() + html + "<br/>");


            if (transitionFound || isError) {
                // Trigger an applet restart if transition requires it
                if (finalTransition.next_state.section_data.trigger_applet_restart) {
                    triggerAppletRestart();
                }
            }
        }

        /**
         * @returns a string containing the current time.
         * Used for logging purposes.
         */
        function getCurrentTimeString() {
            var currentTime = new Date()
            var milliseconds = currentTime.getTime() % 1000;
            var seconds = currentTime.getSeconds();
            var minutes = currentTime.getMinutes();
            var hours = currentTime.getHours();
            return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
        }
</script>

<div id='wait_section'>
    <div>Sending your vote<br /><small>Please wait..</small></div>
</div>

<div id="success_section">
    <h2>Your vote was successfully casted</h2><h3>Thanks for participating</h3>
    <small>You can remove your DNIe from the card reader</small>
</div>


<div id="error_section">
    <h2>Title</h2><p>Description</p>
</div>

<div id="info_section">
    <h2>Title</h2><p>Description</p>
</div>


<div id="applet_info">
...
</div>

<div id="applet_log">
...
</div>

<div id="java_applet_wrapper">
    <applet id="java_applet" code="org.agora.VotingApplet.class" archive="lib/apache-commons-codec-1.4.jar, lib/bcprov-1.45.jar, lib/verificatum.jar, lib/agora-applet.jar" width="0" height="0">applet yeah</applet>
</div>

